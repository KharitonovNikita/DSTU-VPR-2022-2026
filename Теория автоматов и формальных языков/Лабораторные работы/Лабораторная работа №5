from prettytable import PrettyTable

def determinizationАutomaton(
        start_vertex: list[str],
        end_vertex: list[str],
        alphabet: list[str],
        table_data: list[dict[str]]
) -> tuple[list[str], list[str], list[dict[str]]]:
    p_table_data: list[dict[str]] = []
    queue = [{"index": 0, "data": start_vertex}]
    p_start_vertex = ["P0"]
    p_end_vertex = []

    index = 0
    while queue:
        current_p = queue.pop(0)
        p_index = current_p["index"]
        print(f"> P{p_index} = {current_p['data']}")

        if current_p["data"]: # конечна ли вершина
            for el in end_vertex:
                if el in current_p["data"]:
                    p_end_vertex.append(f"P{p_index}")
                    break

        for symbol in alphabet: #по символам и вершинам - определние состояния p
            new_p_data = list()
            for s in current_p["data"]:
                d_row: dict = [row for row in table_data if row["from"] == s][0]
                data = d_row["to"][alphabet.index(symbol)]
                if data is None:
                    continue
                if type(data) is list:
                    for el in data:
                        if el not in new_p_data:
                            new_p_data.append(el)
                else:
                    new_p_data.append(data)
                print(f"\t({s}; {symbol})-> {data}")

            if not new_p_data:
                print(f"(P{p_index}; {symbol})-> ∅")
                p_table_data.append({"from": f'P{p_index}', "to": new_p_data, "mask": f"∅", "symbol": symbol})
                continue

            if new_p_data in [p["to"] for p in p_table_data]:
                view_index = int([p["mask"] for p in p_table_data if p["to"] == new_p_data][0][1:])
            else:
                index += 1
                view_index = index

                if new_p_data and view_index not in [p["index"] for p in queue]:
                    queue.append({"index": view_index, "data": new_p_data})

            print(f"(P{p_index}; {symbol})-> {new_p_data} == P{view_index}")

            p_table_data.append({"from": f'P{p_index}', "to": new_p_data, "mask": f"P{view_index}", "symbol": symbol})

    return p_start_vertex, p_end_vertex, p_table_data


def check_word(input_value, p_start_vertex, p_end_vertex, p_table_data):
    current_p = p_start_vertex[0]
    for symbol in input_value:
        row = [row for row in p_table_data if row["from"] == current_p and row["symbol"] == symbol][0]
        if row["mask"] == "∅":
            return False # символ не воспринимается автоматом
        current_p = row["mask"]
    return current_p in p_end_vertex

#------------------------------------------------------------------------------------------------------------------------------------
def main():
#-----------------------------------------------------------------------------------------------------------------------------------
    alphabet = []
    print("""Сейчас будет производитсья ввод алфавита.
            'End' -  Завершение ввода.
            PS: Обязательно напиши ε! """)


    while True:
         value = input("<< Ввод символа: ")
         if value == 'End':
            break
         if len(value) != 1:
             print("Ошибка! Введено не одно значение")
             continue
         alphabet.append(value)

    while True:
         count_of_vertex = input("Ввод количества вершин: ")
         if not count_of_vertex.isdigit():
             print("Ошибка! Введено не число")
             continue
         count_of_vertex = int(count_of_vertex)
         if count_of_vertex < 1:
             print("Ошибка! Введено не положительное число")
             continue
         break
#-----------------------------------------------------------------------------------------------------------------------------------
    print("""
            Сейчас будет производиться ввод начальных состояний
            'End' -  Завершение ввода""")
    start_vertex = []
    while True:
         vertex = input("<< Ввод начального состояния: ")
         if vertex == 'End':
             break
         if vertex not in [f"q{i}" for i in range(count_of_vertex)]:
             print("Ошибка! Введено не состояние")
             continue
         start_vertex.append(vertex)
#-----------------------------------------------------------------------------------------------------------------------------------
    print("""
            Сейчас будет производиться ввод конечных состояний
            'End' -  Завершение ввода""")
    end_vertex = []
    while True:
         vertex = input("<< Ввод конечного состояния: ")
         if vertex == 'End':
             break
         if vertex not in [f"q{i}" for i in range(count_of_vertex)]:
             print("Ошибка! Введено не состояние")
             continue
         end_vertex.append(vertex)
#-----------------------------------------------------------------------------------------------------------------------------------
    print("""Cейчас будет производиться ввод переходов
             Если переход отсутствует - необходимо ввести ввести '-' """)
    table_data: list[dict[str, list]] = []
    for i in range(count_of_vertex):
         row = []
         for j in range(len(alphabet)):
             value = input(f"Переход из q{i} по {alphabet[j]}: ").replace(" ", "").split(",")
             if value == ['-']:
                 value = None
             row.append(value)

         table_data.append({"from": f'q{i}', "to": row})

    new_table_data = []
    for row in table_data:
        new_row = {"from": row["from"], "to": row["to"][:len(row["to"])-1]}
        new_table_data.append(new_row)



#-----------------------------------------------------------------------------------------------------------------------------------
    table = PrettyTable() # q переходы
    table.field_names = [" "] + alphabet
    for row in table_data:
        row = [row["from"]] + row["to"]
        for i in range(len(row)):
            if row[i] is None:
                row[i] = "∅"
            if type(row[i]) is list:
                row[i] = ", ".join(row[i])
        table.add_row(row)
    print(table)


    print()
    print(f"ε-замыкания: ") # eps по последнему столбцу
    e_per = PrettyTable()
    e_per.field_names = ["from", "to"]
    for row in table_data:
        e_per.add_row([row["from"], row["to"][-1]])
    print(e_per)
#-----------------------------------------------------------------------------------------------------------------------------------
    S_list = []
    for i in range(count_of_vertex):
        S_list.append(table_data[i]["to"][-1])

    for i in range(len(S_list)):
        if S_list[i] is not None:
            S_list[i] = S_list[i]

    print("Переменные S:")
    for i, value in enumerate(S_list, start=0):
        print(f"S{i} = {value}")
#-----------------------------------------------------------------------------------------------------------------------------------
    new_alphabet=[]
    for i in range(len(alphabet)-1):
        new_alphabet.append(alphabet[i])
    print()

    end_=[]
    end_S = []
    for value in S_list: # просмотр начальных и конечных состояний q
        for vertex in end_vertex:
            if vertex in value:
                end_S.append(value)
                break


    for value in S_list:
        for vertex in end_S:
            if any(v in vertex for v in value):
                end_.append(value)
                break


    if start_vertex:
        start_vertex_index = start_vertex.index(start_vertex[0])

    vertex_S = ["S"+str(i) for i in range(len(S_list))]  # Набор S

    start_vertex_S = []
    end_vertex_S = []
    start =S_list[start_vertex_index]

    for i in range(len(S_list)):
        for j in start:
            if j in S_list[i]:
                start_vertex_S.append(vertex_S[i])
                break
    for i in range(len(S_list)):
        for j in end_vertex:
            if j in S_list[i]:
                end_vertex_S.append(vertex_S[i])
                break

    print("Начальные S состояния: ", *start_vertex_S)
    print("Конечные S состояния: ", *end_vertex_S)

#------------------------------------------------------------------------------------------------------------------------------------
    S = [[[] for i in range(len(new_alphabet))] for j in range(len(S_list))]
    for i in range(len(table_data)):
        for j in range(len(new_table_data[i]["to"])):
            for k in range(len(S_list)):
                if new_table_data[i]["to"][j] is not None and set(S_list[k]).issubset(new_table_data[i]["to"][j]):
                 if "S" + str(k) not in S[i][j]:
                    S[i][j].append("S" + str(k))
 #------------------------------------------------------------------------------------------------------------------------------------

    print("Таблица S: ")
    Stable = PrettyTable()
    Stable.add_column('', vertex_S)
    for col_index in range(len(new_alphabet)):
        p = []
        for row_index in range(len(S)):
            value = S[row_index][col_index]
            if value == None:
                value = "∅"
            p.append(value)
        Stable.add_column(new_alphabet[col_index], p)
    print(Stable)
 #------------------------------------------------------------------------------------------------------------------------------------

    table_data_S: list[dict[str, list]] = []
    for i in range(len(S)):
        row = []
        for j in range(len(new_alphabet)):
            value = S[i][j]
            row.append(value)
        table_data_S.append({"from": f'S{i}', "to": row})
 #------------------------------------------------------------------------------------------------------------------------------------
    p_start_vertex, p_end_vertex, p_table_data = determinizationАutomaton(
        start_vertex=start_vertex_S,
        end_vertex=end_vertex_S,
        alphabet=new_alphabet,
        table_data=table_data_S
    )
 #------------------------------------------------------------------------------------------------------------------------------------
    print("Начальная Р вершина:", *p_start_vertex)
    print("Финальная Р вершина: ", *p_end_vertex)
    # ----------------- Вывод таблицы -----------------
    table = PrettyTable()
    table.field_names = [" "] + new_alphabet
    rows: list[list] = []
    count_of_rows = len(p_table_data) // len(new_alphabet)
    for i in range(count_of_rows):
        row = [f"P{i}"]
        for el in [_ for _ in p_table_data if _["from"] == f"P{i}"]:
            row.append(el["mask"])
        rows.append(row)
        table.add_row(row)
    print(table)
 #------------------------------------------------------------------------------------------------------------------------------------
    print("""\n\n
          Проверка: Допускает ли автомат введенную цепочку
          'End'- Закончить)\n\n""")

    while True:
        input_value = input("<< Ввод цепочки: ")
        if input_value.replace(" ", "").lower() == 'end':
            break
        k=0
        while k==0:

            for char in input_value:
                if char not in new_alphabet:
                    print(f"Ошибка! Символ '{char}' из цепочки не принадлежит переданному алфавиту {new_alphabet}.")
                    input_value = input("Введите цепочку: ")
                    break
            k=1


        if check_word(input_value, p_start_vertex, p_end_vertex, p_table_data):
            print("Круто! Автомат допускает данную цепочку")
        else:
            print("Беда! Автомат не допускает данную цепочку")


if __name__ == '__main__':
    main()
